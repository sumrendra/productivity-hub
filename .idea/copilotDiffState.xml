<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/utils/globals.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/globals.js" />
              <option name="originalContent" value="// Global Functions - Functions that need to be accessible from HTML onclick handlers&#10;&#10;function getNotesInstance() {&#10;    return window.NotesModule || window.productivePro?.modules?.notes || null;&#10;}&#10;&#10;function createNewNote() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.createNewNote === 'function') {&#10;        inst.createNewNote();&#10;    }&#10;}&#10;&#10;function openNoteInEditor(noteId) {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.openNoteInEditor === 'function') {&#10;        inst.openNoteInEditor(noteId);&#10;    }&#10;}&#10;&#10;function saveCurrentNoteManually() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.saveCurrentNoteManually === 'function') {&#10;        inst.saveCurrentNoteManually();&#10;    }&#10;}&#10;&#10;function formatDocument(command, value = null) {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.formatDocument === 'function') {&#10;        inst.formatDocument(command, value);&#10;        return;&#10;    }&#10;    // fallback to execCommand and schedule save&#10;    document.execCommand(command, false, value);&#10;    if (inst &amp;&amp; typeof inst.setSaveStatus === 'function') {&#10;        inst.setSaveStatus('saving');&#10;        inst.scheduleAutoSave();&#10;    }&#10;}&#10;&#10;function insertLink() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.insertLink === 'function') {&#10;        inst.insertLink();&#10;    }&#10;}&#10;&#10;function insertImage() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.insertImage === 'function') {&#10;        inst.insertImage();&#10;    }&#10;}&#10;&#10;function insertTable() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.insertTable === 'function') {&#10;        inst.insertTable();&#10;    }&#10;}&#10;&#10;function insertCodeBlock() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.insertCodeBlock === 'function') {&#10;        inst.insertCodeBlock();&#10;    }&#10;}&#10;&#10;function handleTagInput(event) {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.handleTagInput === 'function') {&#10;        inst.handleTagInput(event);&#10;    } else {&#10;        // fallback: call global handler if present&#10;        if (typeof window.handleTagInput === 'function') {&#10;            window.handleTagInput(event);&#10;        }&#10;    }&#10;}&#10;&#10;function toggleFullscreen() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.toggleFullscreen === 'function') {&#10;        inst.toggleFullscreen();&#10;    }&#10;}&#10;&#10;function exportNote() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.exportNote === 'function') {&#10;        inst.exportNote();&#10;    }&#10;}&#10;&#10;function duplicateNote() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.duplicateNote === 'function') {&#10;        inst.duplicateNote();&#10;    }&#10;}&#10;&#10;function deleteCurrentNote() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.deleteCurrentNote === 'function') {&#10;        inst.deleteCurrentNote();&#10;    }&#10;}&#10;&#10;function removeNoteTag(tag) {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.removeNoteTag === 'function') {&#10;        inst.removeNoteTag(tag);&#10;    }&#10;}&#10;&#10;// Modal functions&#10;function showCreateNote() {&#10;    window.UIUtils.openModal('note-modal', {&#10;        title: 'Create New Note',&#10;        onSave: async (noteData) =&gt; {&#10;            try {&#10;                const tags = noteData.tags ? noteData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag) : [];&#10;                await window.apiService.createNote({...noteData, tags});&#10;                if (window.DashboardModule) {&#10;                    window.DashboardModule.updateStats();&#10;                }&#10;                window.UIUtils.showToast('Note created successfully');&#10;            } catch (error) {&#10;                console.error('Error creating note:', error);&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function showCreateLink() {&#10;    // Prevent multiple calls and ensure only one modal opens&#10;    if (document.querySelector('.modern-modal:not(.hidden)')) {&#10;        return; // Another modal is already open&#10;    }&#10;&#10;    window.UIUtils.openModal('link-modal', {&#10;        title: 'Add New Link',&#10;        onSave: async (linkData) =&gt; {&#10;            try {&#10;                const tags = linkData.tags ? linkData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag) : [];&#10;                await window.apiService.createLink({...linkData, tags});&#10;                if (window.LinksModule) {&#10;                    window.LinksModule.render();&#10;                }&#10;                if (window.DashboardModule) {&#10;                    window.DashboardModule.updateStats();&#10;                }&#10;                window.UIUtils.showToast('Link created successfully');&#10;            } catch (error) {&#10;                console.error('Error creating link:', error);&#10;                window.UIUtils.showToast('Failed to create link', 'error');&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function showCreateTask() {&#10;    // Prevent multiple calls and ensure only one modal opens&#10;    if (document.querySelector('.modern-modal:not(.hidden)')) {&#10;        return; // Another modal is already open&#10;    }&#10;&#10;    window.UIUtils.openModal('task-modal', {&#10;        title: 'Create New Task',&#10;        onSave: async (taskData) =&gt; {&#10;            try {&#10;                const newTask = {&#10;                    ...taskData,&#10;                    status: 'todo', // Default status for new tasks&#10;                    createdAt: new Date().toISOString()&#10;                };&#10;                await window.apiService.createTask(newTask);&#10;                if (window.ProjectsModule) {&#10;                    window.ProjectsModule.render();&#10;                }&#10;                if (window.DashboardModule) {&#10;                    window.DashboardModule.updateStats();&#10;                }&#10;                window.UIUtils.showToast('Task created successfully');&#10;            } catch (error) {&#10;                console.error('Error creating task:', error);&#10;                window.UIUtils.showToast('Failed to create task', 'error');&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function showCreateExpense() {&#10;    // Prevent multiple calls and ensure only one modal opens&#10;    if (document.querySelector('.modern-modal:not(.hidden)')) {&#10;        return; // Another modal is already open&#10;    }&#10;&#10;    const today = new Date().toISOString().split('T')[0];&#10;    window.UIUtils.openModal('expense-modal', {&#10;        title: 'Add Transaction',&#10;        data: { date: today },&#10;        onSave: async (expenseData) =&gt; {&#10;            try {&#10;                await window.apiService.createExpense(expenseData);&#10;                if (window.DashboardModule) {&#10;                    window.DashboardModule.updateStats();&#10;                }&#10;                if (window.FinanceModule) {&#10;                    window.FinanceModule.render();&#10;                }&#10;                window.UIUtils.showToast('Transaction created successfully');&#10;            } catch (error) {&#10;                console.error('Error creating expense:', error);&#10;                window.UIUtils.showToast('Failed to create transaction', 'error');&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function closeModal(modalId) {&#10;    window.UIUtils.closeModal(modalId);&#10;}&#10;&#10;function formatText(command) {&#10;    document.execCommand(command, false, null);&#10;    const noteContent = document.getElementById('note-content');&#10;    if (noteContent) {&#10;        noteContent.focus();&#10;    }&#10;}&#10;&#10;// expose for HTML if needed (they already call global functions by name)&#10;window.openNoteInEditor = openNoteInEditor;&#10;window.createNewNote = createNewNote;&#10;window.saveCurrentNoteManually = saveCurrentNoteManually;&#10;window.formatDocument = formatDocument;&#10;window.handleTagInput = handleTagInput;&#10;window.toggleFullscreen = toggleFullscreen;&#10;window.exportNote = exportNote;&#10;window.duplicateNote = duplicateNote;&#10;window.deleteCurrentNote = deleteCurrentNote;&#10;window.removeNoteTag = removeNoteTag;&#10;&#10;// Explicitly export modal helpers so inline onclick handlers always call the right functions&#10;window.showCreateNote = showCreateNote;&#10;window.showCreateLink = showCreateLink;&#10;window.showCreateTask = showCreateTask;&#10;window.showCreateExpense = showCreateExpense;&#10;" />
              <option name="updatedContent" value="// Global Functions - Functions that need to be accessible from HTML onclick handlers&#10;&#10;function getNotesInstance() {&#10;    return window.NotesModule || window.productivePro?.modules?.notes || null;&#10;}&#10;&#10;function createNewNote() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.createNewNote === 'function') {&#10;        inst.createNewNote();&#10;    }&#10;}&#10;&#10;function openNoteInEditor(noteId) {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.openNoteInEditor === 'function') {&#10;        inst.openNoteInEditor(noteId);&#10;    }&#10;}&#10;&#10;function saveCurrentNoteManually() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.saveCurrentNoteManually === 'function') {&#10;        inst.saveCurrentNoteManually();&#10;    }&#10;}&#10;&#10;function formatDocument(command, value = null) {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.formatDocument === 'function') {&#10;        inst.formatDocument(command, value);&#10;        return;&#10;    }&#10;    // fallback to execCommand and schedule save&#10;    document.execCommand(command, false, value);&#10;    if (inst &amp;&amp; typeof inst.setSaveStatus === 'function') {&#10;        inst.setSaveStatus('saving');&#10;        inst.scheduleAutoSave();&#10;    }&#10;}&#10;&#10;function insertLink() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.insertLink === 'function') {&#10;        inst.insertLink();&#10;    }&#10;}&#10;&#10;function insertImage() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.insertImage === 'function') {&#10;        inst.insertImage();&#10;    }&#10;}&#10;&#10;function insertTable() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.insertTable === 'function') {&#10;        inst.insertTable();&#10;    }&#10;}&#10;&#10;function insertCodeBlock() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.insertCodeBlock === 'function') {&#10;        inst.insertCodeBlock();&#10;    }&#10;}&#10;&#10;function handleTagInput(event) {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.handleTagInput === 'function') {&#10;        inst.handleTagInput(event);&#10;    } else {&#10;        // fallback: call global handler if present&#10;        if (typeof window.handleTagInput === 'function') {&#10;            window.handleTagInput(event);&#10;        }&#10;    }&#10;}&#10;&#10;function toggleFullscreen() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.toggleFullscreen === 'function') {&#10;        inst.toggleFullscreen();&#10;    }&#10;}&#10;&#10;function exportNote() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.exportNote === 'function') {&#10;        inst.exportNote();&#10;    }&#10;}&#10;&#10;function duplicateNote() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.duplicateNote === 'function') {&#10;        inst.duplicateNote();&#10;    }&#10;}&#10;&#10;function deleteCurrentNote() {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.deleteCurrentNote === 'function') {&#10;        inst.deleteCurrentNote();&#10;    }&#10;}&#10;&#10;function removeNoteTag(tag) {&#10;    const inst = getNotesInstance();&#10;    if (inst &amp;&amp; typeof inst.removeNoteTag === 'function') {&#10;        inst.removeNoteTag(tag);&#10;    }&#10;}&#10;&#10;// Modal functions&#10;function showCreateNote() {&#10;    console.log('showCreateNote called');&#10;    &#10;    // CRITICAL: Check if any modal is already open&#10;    if (window.UIUtils &amp;&amp; window.UIUtils.isModalOpen) {&#10;        console.log('showCreateNote blocked - modal already open');&#10;        return;&#10;    }&#10;    &#10;    // Additional DOM-based check as backup&#10;    if (document.querySelector('.modern-modal:not(.hidden)')) {&#10;        console.log('showCreateNote blocked - DOM check found open modal');&#10;        return;&#10;    }&#10;    &#10;    window.UIUtils.openModal('note-modal', {&#10;        title: 'Create New Note',&#10;        onSave: async (noteData) =&gt; {&#10;            try {&#10;                const tags = noteData.tags ? noteData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag) : [];&#10;                await window.apiService.createNote({...noteData, tags});&#10;                if (window.DashboardModule) {&#10;                    window.DashboardModule.updateStats();&#10;                }&#10;                window.UIUtils.showToast('Note created successfully');&#10;            } catch (error) {&#10;                console.error('Error creating note:', error);&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function showCreateLink() {&#10;    console.log('showCreateLink called');&#10;    &#10;    // CRITICAL: Check if any modal is already open&#10;    if (window.UIUtils &amp;&amp; window.UIUtils.isModalOpen) {&#10;        console.log('showCreateLink blocked - modal already open');&#10;        return;&#10;    }&#10;    &#10;    // Additional DOM-based check as backup&#10;    if (document.querySelector('.modern-modal:not(.hidden)')) {&#10;        console.log('showCreateLink blocked - DOM check found open modal');&#10;        return;&#10;    }&#10;    &#10;    window.UIUtils.openModal('link-modal', {&#10;        title: 'Add New Link',&#10;        onSave: async (linkData) =&gt; {&#10;            try {&#10;                const tags = linkData.tags ? linkData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag) : [];&#10;                await window.apiService.createLink({...linkData, tags});&#10;                if (window.LinksModule) {&#10;                    window.LinksModule.render();&#10;                }&#10;                if (window.DashboardModule) {&#10;                    window.DashboardModule.updateStats();&#10;                }&#10;                window.UIUtils.showToast('Link created successfully');&#10;            } catch (error) {&#10;                console.error('Error creating link:', error);&#10;                window.UIUtils.showToast('Failed to create link', 'error');&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function showCreateTask() {&#10;    console.log('showCreateTask called');&#10;    &#10;    // CRITICAL: Check if any modal is already open&#10;    if (window.UIUtils &amp;&amp; window.UIUtils.isModalOpen) {&#10;        console.log('showCreateTask blocked - modal already open');&#10;        return;&#10;    }&#10;    &#10;    // Additional DOM-based check as backup&#10;    if (document.querySelector('.modern-modal:not(.hidden)')) {&#10;        console.log('showCreateTask blocked - DOM check found open modal');&#10;        return;&#10;    }&#10;    &#10;    window.UIUtils.openModal('task-modal', {&#10;        title: 'Create New Task',&#10;        onSave: async (taskData) =&gt; {&#10;            try {&#10;                const newTask = {&#10;                    ...taskData,&#10;                    status: 'todo', // Default status for new tasks&#10;                    createdAt: new Date().toISOString()&#10;                };&#10;                await window.apiService.createTask(newTask);&#10;                if (window.ProjectsModule) {&#10;                    window.ProjectsModule.render();&#10;                }&#10;                if (window.DashboardModule) {&#10;                    window.DashboardModule.updateStats();&#10;                }&#10;                window.UIUtils.showToast('Task created successfully');&#10;            } catch (error) {&#10;                console.error('Error creating task:', error);&#10;                window.UIUtils.showToast('Failed to create task', 'error');&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function showCreateExpense() {&#10;    console.log('showCreateExpense called');&#10;    &#10;    // CRITICAL: Check if any modal is already open&#10;    if (window.UIUtils &amp;&amp; window.UIUtils.isModalOpen) {&#10;        console.log('showCreateExpense blocked - modal already open');&#10;        return;&#10;    }&#10;    &#10;    // Additional DOM-based check as backup&#10;    if (document.querySelector('.modern-modal:not(.hidden)')) {&#10;        console.log('showCreateExpense blocked - DOM check found open modal');&#10;        return;&#10;    }&#10;    &#10;    const today = new Date().toISOString().split('T')[0];&#10;    window.UIUtils.openModal('expense-modal', {&#10;        title: 'Add Transaction',&#10;        data: { date: today },&#10;        onSave: async (expenseData) =&gt; {&#10;            try {&#10;                await window.apiService.createExpense(expenseData);&#10;                if (window.DashboardModule) {&#10;                    window.DashboardModule.updateStats();&#10;                }&#10;                if (window.FinanceModule) {&#10;                    window.FinanceModule.render();&#10;                }&#10;                window.UIUtils.showToast('Transaction created successfully');&#10;            } catch (error) {&#10;                console.error('Error creating expense:', error);&#10;                window.UIUtils.showToast('Failed to create transaction', 'error');&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;function closeModal(modalId) {&#10;    window.UIUtils.closeModal(modalId);&#10;}&#10;&#10;function formatText(command) {&#10;    document.execCommand(command, false, null);&#10;    const noteContent = document.getElementById('note-content');&#10;    if (noteContent) {&#10;        noteContent.focus();&#10;    }&#10;}&#10;&#10;// expose for HTML if needed (they already call global functions by name)&#10;window.openNoteInEditor = openNoteInEditor;&#10;window.createNewNote = createNewNote;&#10;window.saveCurrentNoteManually = saveCurrentNoteManually;&#10;window.formatDocument = formatDocument;&#10;window.handleTagInput = handleTagInput;&#10;window.toggleFullscreen = toggleFullscreen;&#10;window.exportNote = exportNote;&#10;window.duplicateNote = duplicateNote;&#10;window.deleteCurrentNote = deleteCurrentNote;&#10;window.removeNoteTag = removeNoteTag;&#10;&#10;// Explicitly export modal helpers so inline onclick handlers always call the right functions&#10;window.showCreateNote = showCreateNote;&#10;window.showCreateLink = showCreateLink;&#10;window.showCreateTask = showCreateTask;&#10;window.showCreateExpense = showCreateExpense;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/utils/ui.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/ui.js" />
              <option name="originalContent" value="// UI Utilities - Modal management, toasts, and common UI functions&#10;class UIUtils {&#10;    static showToast(message, type = 'success', title = '') {&#10;        const toastContainer = document.getElementById('toast-container');&#10;        if (!toastContainer) return;&#10;&#10;        const toast = document.createElement('div');&#10;        toast.className = `toast ${type}`;&#10;&#10;        const iconMap = {&#10;            success: 'check_circle',&#10;            error: 'error',&#10;            warning: 'warning',&#10;            info: 'info'&#10;        };&#10;&#10;        toast.innerHTML = `&#10;            &lt;span class=&quot;material-icons&quot;&gt;${iconMap[type]}&lt;/span&gt;&#10;            &lt;div class=&quot;toast-content&quot;&gt;&#10;                ${title ? `&lt;div class=&quot;toast-title&quot;&gt;${title}&lt;/div&gt;` : ''}&#10;                &lt;div class=&quot;toast-message&quot;&gt;${message}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;button class=&quot;toast-close&quot;&gt;&#10;                &lt;span class=&quot;material-icons&quot;&gt;close&lt;/span&gt;&#10;            &lt;/button&gt;&#10;        `;&#10;&#10;        toastContainer.appendChild(toast);&#10;&#10;        setTimeout(() =&gt; toast.classList.add('show'), 100);&#10;&#10;        const closeBtn = toast.querySelector('.toast-close');&#10;        closeBtn.addEventListener('click', () =&gt; this.removeToast(toast));&#10;&#10;        setTimeout(() =&gt; this.removeToast(toast), 5000);&#10;    }&#10;&#10;    static removeToast(toast) {&#10;        toast.classList.remove('show');&#10;        setTimeout(() =&gt; toast.remove(), 300);&#10;    }&#10;&#10;    static openModal(modalId, options = {}) {&#10;        // First, close ALL open modals to prevent stacking&#10;        this.closeAllModals();&#10;&#10;        const modal = document.getElementById(modalId);&#10;        const overlay = document.getElementById('modal-overlay');&#10;        if (!modal || !overlay) return;&#10;&#10;        overlay.classList.remove('hidden');&#10;        modal.classList.remove('hidden');&#10;        document.body.style.overflow = 'hidden';&#10;&#10;        // Set modal title if provided&#10;        if (options.title) {&#10;            const titleEl = modal.querySelector('h3');&#10;            if (titleEl) titleEl.textContent = options.title;&#10;        }&#10;&#10;        // Populate form data if provided&#10;        if (options.data) {&#10;            this.populateModalForm(modal, options.data);&#10;        }&#10;&#10;        // Set up save handler if provided&#10;        if (options.onSave) {&#10;            const form = modal.querySelector('form');&#10;            if (form) {&#10;                // Remove any existing event listeners&#10;                const newForm = form.cloneNode(true);&#10;                form.parentNode.replaceChild(newForm, form);&#10;&#10;                newForm.onsubmit = async (e) =&gt; {&#10;                    e.preventDefault();&#10;                    const formData = this.getFormData(newForm);&#10;                    await options.onSave(formData);&#10;                    this.closeModal(modalId);&#10;                };&#10;            }&#10;        }&#10;    }&#10;&#10;    static closeAllModals() {&#10;        // Close all modals that might be open&#10;        const allModals = document.querySelectorAll('.modern-modal');&#10;        allModals.forEach(modal =&gt; {&#10;            modal.classList.add('hidden');&#10;            // Reset any forms in the modal&#10;            const form = modal.querySelector('form');&#10;            if (form) {&#10;                form.reset();&#10;                form.onsubmit = null;&#10;            }&#10;        });&#10;&#10;        const overlay = document.getElementById('modal-overlay');&#10;        if (overlay) {&#10;            overlay.classList.add('hidden');&#10;        }&#10;        document.body.style.overflow = 'auto';&#10;    }&#10;&#10;    static closeModal(modalId) {&#10;        const modal = document.getElementById(modalId);&#10;        const overlay = document.getElementById('modal-overlay');&#10;        if (!modal || !overlay) return;&#10;&#10;        modal.classList.add('hidden');&#10;        overlay.classList.add('hidden');&#10;        document.body.style.overflow = 'auto';&#10;&#10;        const form = modal.querySelector('form');&#10;        if (form) {&#10;            form.reset();&#10;            form.onsubmit = null;&#10;        }&#10;    }&#10;&#10;    static showConfirmDialog(message, onConfirm) {&#10;        const confirmModal = document.getElementById('confirm-modal');&#10;        if (!confirmModal) return;&#10;&#10;        document.getElementById('confirm-message').textContent = message;&#10;        document.getElementById('confirm-btn').onclick = () =&gt; {&#10;            onConfirm();&#10;            this.closeModal('confirm-modal');&#10;        };&#10;        this.openModal('confirm-modal');&#10;    }&#10;&#10;    static populateModalForm(modal, data) {&#10;        Object.keys(data).forEach(key =&gt; {&#10;            const input = modal.querySelector(`#${key}, [name=&quot;${key}&quot;]`);&#10;            if (input) {&#10;                input.value = data[key];&#10;            }&#10;        });&#10;    }&#10;&#10;    static getFormData(form) {&#10;        const formData = new FormData(form);&#10;        const data = {};&#10;&#10;        // Get all form inputs&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;        inputs.forEach(input =&gt; {&#10;            if (input.id) {&#10;                data[input.id.replace(/^[^-]*-/, '')] = input.value;&#10;            }&#10;        });&#10;&#10;        return data;&#10;    }&#10;&#10;    static initializeModalHandlers() {&#10;        // Close modal when clicking overlay&#10;        const overlay = document.getElementById('modal-overlay');&#10;        if (overlay) {&#10;            overlay.addEventListener('click', (e) =&gt; {&#10;                if (e.target === overlay) {&#10;                    const openModal = overlay.querySelector('.modern-modal:not(.hidden)');&#10;                    if (openModal) {&#10;                        this.closeModal(openModal.id);&#10;                    }&#10;                }&#10;            });&#10;        }&#10;&#10;        // Initialize expense form handler&#10;        const expenseForm = document.getElementById('expense-form');&#10;        if (expenseForm) {&#10;            expenseForm.addEventListener('submit', async (e) =&gt; {&#10;                e.preventDefault();&#10;                await this.handleExpenseSubmit(e);&#10;            });&#10;        }&#10;&#10;        // Set default date for expense modal&#10;        const expenseDate = document.getElementById('expense-date');&#10;        if (expenseDate) {&#10;            expenseDate.value = new Date().toISOString().split('T')[0];&#10;        }&#10;    }&#10;&#10;    static async handleExpenseSubmit(e) {&#10;        const formData = this.getFormData(e.target);&#10;&#10;        try {&#10;            if (window.ApiService) {&#10;                await window.ApiService.createExpense(formData);&#10;                if (window.FinanceModule) {&#10;                    window.FinanceModule.render();&#10;                }&#10;                this.showToast('Transaction saved successfully!');&#10;            }&#10;        } catch (error) {&#10;            console.error('Error saving transaction:', error);&#10;            this.showToast('Failed to save transaction', 'error');&#10;        }&#10;&#10;        this.closeModal('expense-modal');&#10;    }&#10;}&#10;&#10;// Global modal functions for HTML onclick events&#10;window.closeModal = function(modalId) {&#10;    UIUtils.closeModal(modalId);&#10;};&#10;&#10;window.showCreateNote = function() {&#10;    if (window.NotesModule) {&#10;        window.NotesModule.createNewNote();&#10;    }&#10;};&#10;&#10;window.showCreateTask = function() {&#10;    if (window.ProjectsModule) {&#10;        window.ProjectsModule.createNewTask();&#10;    }&#10;};&#10;&#10;window.showCreateExpense = function() {&#10;    UIUtils.openModal('expense-modal', {&#10;        title: 'Add Transaction'&#10;    });&#10;};&#10;&#10;window.clearFinanceFilters = function() {&#10;    const categoryFilter = document.getElementById('expense-category-filter');&#10;    const typeFilter = document.getElementById('expense-type-filter');&#10;&#10;    if (categoryFilter) categoryFilter.value = '';&#10;    if (typeFilter) typeFilter.value = '';&#10;&#10;    if (window.FinanceModule) {&#10;        window.FinanceModule.render();&#10;    }&#10;};&#10;&#10;window.UIUtils = UIUtils;&#10;" />
              <option name="updatedContent" value="// UI Utilities - Modal management, toasts, and common UI functions&#10;class UIUtils {&#10;    static isModalOpen = false;&#10;    static currentOpenModal = null;&#10;&#10;    static showToast(message, type = 'success', title = '') {&#10;        const toastContainer = document.getElementById('toast-container');&#10;        if (!toastContainer) return;&#10;&#10;        const toast = document.createElement('div');&#10;        toast.className = `toast ${type}`;&#10;&#10;        const iconMap = {&#10;            success: 'check_circle',&#10;            error: 'error',&#10;            warning: 'warning',&#10;            info: 'info'&#10;        };&#10;&#10;        toast.innerHTML = `&#10;            &lt;span class=&quot;material-icons&quot;&gt;${iconMap[type]}&lt;/span&gt;&#10;            &lt;div class=&quot;toast-content&quot;&gt;&#10;                ${title ? `&lt;div class=&quot;toast-title&quot;&gt;${title}&lt;/div&gt;` : ''}&#10;                &lt;div class=&quot;toast-message&quot;&gt;${message}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;button class=&quot;toast-close&quot;&gt;&#10;                &lt;span class=&quot;material-icons&quot;&gt;close&lt;/span&gt;&#10;            &lt;/button&gt;&#10;        `;&#10;&#10;        toastContainer.appendChild(toast);&#10;&#10;        setTimeout(() =&gt; toast.classList.add('show'), 100);&#10;&#10;        const closeBtn = toast.querySelector('.toast-close');&#10;        closeBtn.addEventListener('click', () =&gt; this.removeToast(toast));&#10;&#10;        setTimeout(() =&gt; this.removeToast(toast), 5000);&#10;    }&#10;&#10;    static removeToast(toast) {&#10;        toast.classList.remove('show');&#10;        setTimeout(() =&gt; toast.remove(), 300);&#10;    }&#10;&#10;    static openModal(modalId, options = {}) {&#10;        console.log(`Attempting to open modal: ${modalId}`);&#10;        &#10;        // CRITICAL: If a modal is already in the process of opening, block this call&#10;        if (this.isModalOpen) {&#10;            console.log(`Modal opening blocked - another modal is already open: ${this.currentOpenModal}`);&#10;            return;&#10;        }&#10;&#10;        // Set the flag immediately to prevent race conditions&#10;        this.isModalOpen = true;&#10;        this.currentOpenModal = modalId;&#10;&#10;        // First, close ALL open modals to prevent stacking&#10;        this.closeAllModals();&#10;        &#10;        const modal = document.getElementById(modalId);&#10;        const overlay = document.getElementById('modal-overlay');&#10;        if (!modal || !overlay) {&#10;            this.isModalOpen = false;&#10;            this.currentOpenModal = null;&#10;            return;&#10;        }&#10;&#10;        overlay.classList.remove('hidden');&#10;        modal.classList.remove('hidden');&#10;        document.body.style.overflow = 'hidden';&#10;&#10;        // Set modal title if provided&#10;        if (options.title) {&#10;            const titleEl = modal.querySelector('h3');&#10;            if (titleEl) titleEl.textContent = options.title;&#10;        }&#10;&#10;        // Populate form data if provided&#10;        if (options.data) {&#10;            this.populateModalForm(modal, options.data);&#10;        }&#10;&#10;        // Set up save handler if provided&#10;        if (options.onSave) {&#10;            const form = modal.querySelector('form');&#10;            if (form) {&#10;                // Remove any existing event listeners&#10;                const newForm = form.cloneNode(true);&#10;                form.parentNode.replaceChild(newForm, form);&#10;                &#10;                newForm.onsubmit = async (e) =&gt; {&#10;                    e.preventDefault();&#10;                    const formData = this.getFormData(newForm);&#10;                    await options.onSave(formData);&#10;                    this.closeModal(modalId);&#10;                };&#10;            }&#10;        }&#10;&#10;        console.log(`Modal opened successfully: ${modalId}`);&#10;    }&#10;&#10;    static closeAllModals() {&#10;        // Close all modals that might be open&#10;        const allModals = document.querySelectorAll('.modern-modal');&#10;        allModals.forEach(modal =&gt; {&#10;            modal.classList.add('hidden');&#10;            // Reset any forms in the modal&#10;            const form = modal.querySelector('form');&#10;            if (form) {&#10;                form.reset();&#10;                form.onsubmit = null;&#10;            }&#10;        });&#10;        &#10;        const overlay = document.getElementById('modal-overlay');&#10;        if (overlay) {&#10;            overlay.classList.add('hidden');&#10;        }&#10;        document.body.style.overflow = 'auto';&#10;        &#10;        // Reset the flags&#10;        this.isModalOpen = false;&#10;        this.currentOpenModal = null;&#10;    }&#10;&#10;    static closeModal(modalId) {&#10;        const modal = document.getElementById(modalId);&#10;        const overlay = document.getElementById('modal-overlay');&#10;        if (!modal || !overlay) return;&#10;&#10;        modal.classList.add('hidden');&#10;        overlay.classList.add('hidden');&#10;        document.body.style.overflow = 'auto';&#10;&#10;        const form = modal.querySelector('form');&#10;        if (form) {&#10;            form.reset();&#10;            form.onsubmit = null;&#10;        }&#10;&#10;        // Reset the flags&#10;        this.isModalOpen = false;&#10;        this.currentOpenModal = null;&#10;        &#10;        console.log(`Modal closed: ${modalId}`);&#10;    }&#10;&#10;    static showConfirmDialog(message, onConfirm) {&#10;        const confirmModal = document.getElementById('confirm-modal');&#10;        if (!confirmModal) return;&#10;&#10;        document.getElementById('confirm-message').textContent = message;&#10;        document.getElementById('confirm-btn').onclick = () =&gt; {&#10;            onConfirm();&#10;            this.closeModal('confirm-modal');&#10;        };&#10;        this.openModal('confirm-modal');&#10;    }&#10;&#10;    static populateModalForm(modal, data) {&#10;        Object.keys(data).forEach(key =&gt; {&#10;            const input = modal.querySelector(`#${key}, [name=&quot;${key}&quot;]`);&#10;            if (input) {&#10;                input.value = data[key];&#10;            }&#10;        });&#10;    }&#10;&#10;    static getFormData(form) {&#10;        const formData = new FormData(form);&#10;        const data = {};&#10;&#10;        // Get all form inputs&#10;        const inputs = form.querySelectorAll('input, select, textarea');&#10;        inputs.forEach(input =&gt; {&#10;            if (input.id) {&#10;                data[input.id.replace(/^[^-]*-/, '')] = input.value;&#10;            }&#10;        });&#10;&#10;        return data;&#10;    }&#10;&#10;    static initializeModalHandlers() {&#10;        // Close modal when clicking overlay&#10;        const overlay = document.getElementById('modal-overlay');&#10;        if (overlay) {&#10;            overlay.addEventListener('click', (e) =&gt; {&#10;                if (e.target === overlay) {&#10;                    const openModal = overlay.querySelector('.modern-modal:not(.hidden)');&#10;                    if (openModal) {&#10;                        this.closeModal(openModal.id);&#10;                    }&#10;                }&#10;            });&#10;        }&#10;&#10;        // Initialize expense form handler&#10;        const expenseForm = document.getElementById('expense-form');&#10;        if (expenseForm) {&#10;            expenseForm.addEventListener('submit', async (e) =&gt; {&#10;                e.preventDefault();&#10;                await this.handleExpenseSubmit(e);&#10;            });&#10;        }&#10;&#10;        // Set default date for expense modal&#10;        const expenseDate = document.getElementById('expense-date');&#10;        if (expenseDate) {&#10;            expenseDate.value = new Date().toISOString().split('T')[0];&#10;        }&#10;    }&#10;&#10;    static async handleExpenseSubmit(e) {&#10;        const formData = this.getFormData(e.target);&#10;&#10;        try {&#10;            if (window.ApiService) {&#10;                await window.ApiService.createExpense(formData);&#10;                if (window.FinanceModule) {&#10;                    window.FinanceModule.render();&#10;                }&#10;                this.showToast('Transaction saved successfully!');&#10;            }&#10;        } catch (error) {&#10;            console.error('Error saving transaction:', error);&#10;            this.showToast('Failed to save transaction', 'error');&#10;        }&#10;&#10;        this.closeModal('expense-modal');&#10;    }&#10;}&#10;&#10;// Global modal functions for HTML onclick events&#10;window.closeModal = function(modalId) {&#10;    UIUtils.closeModal(modalId);&#10;};&#10;&#10;window.showCreateNote = function() {&#10;    if (window.NotesModule) {&#10;        window.NotesModule.createNewNote();&#10;    }&#10;};&#10;&#10;window.showCreateTask = function() {&#10;    if (window.ProjectsModule) {&#10;        window.ProjectsModule.createNewTask();&#10;    }&#10;};&#10;&#10;window.showCreateExpense = function() {&#10;    UIUtils.openModal('expense-modal', {&#10;        title: 'Add Transaction'&#10;    });&#10;};&#10;&#10;window.clearFinanceFilters = function() {&#10;    const categoryFilter = document.getElementById('expense-category-filter');&#10;    const typeFilter = document.getElementById('expense-type-filter');&#10;&#10;    if (categoryFilter) categoryFilter.value = '';&#10;    if (typeFilter) typeFilter.value = '';&#10;&#10;    if (window.FinanceModule) {&#10;        window.FinanceModule.render();&#10;    }&#10;};&#10;&#10;window.UIUtils = UIUtils;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>