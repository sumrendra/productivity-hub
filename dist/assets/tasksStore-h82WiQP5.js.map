{"version":3,"file":"tasksStore-h82WiQP5.js","sources":["../../src/store/tasksStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\nimport type { Task, TaskStatus } from '../types';\n\ninterface TasksState {\n  tasks: Task[];\n  selectedTask: Task | null;\n  isLoading: boolean;\n  error: string | null;\n  filter: TaskStatus | 'all';\n\n  // Actions\n  setTasks: (tasks: Task[]) => void;\n  addTask: (task: Task) => void;\n  updateTask: (id: number, task: Partial<Task>) => void;\n  removeTask: (id: number) => void;\n  selectTask: (task: Task | null) => void;\n  setFilter: (filter: TaskStatus | 'all') => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  clearTasks: () => void;\n\n  // Computed\n  getTasksByStatus: (status: TaskStatus) => Task[];\n  getFilteredTasks: () => Task[];\n}\n\nexport const useTasksStore = create<TasksState>()(\n  devtools(\n    persist(\n      (set, get) => ({\n        tasks: [],\n        selectedTask: null,\n        isLoading: false,\n        error: null,\n        filter: 'all',\n\n        setTasks: (tasks) => set({ tasks }),\n\n        addTask: (task) => set((state) => ({ tasks: [...state.tasks, task] })),\n\n        updateTask: (id, updatedTask) =>\n          set((state) => ({\n            tasks: state.tasks.map((task) =>\n              task.id === id ? { ...task, ...updatedTask } : task\n            ),\n          })),\n\n        removeTask: (id) =>\n          set((state) => ({\n            tasks: state.tasks.filter((task) => task.id !== id),\n          })),\n\n        selectTask: (task) => set({ selectedTask: task }),\n\n        setFilter: (filter) => set({ filter }),\n\n        setLoading: (isLoading) => set({ isLoading }),\n\n        setError: (error) => set({ error }),\n\n        clearTasks: () => set({ tasks: [], selectedTask: null }),\n\n        getTasksByStatus: (status) => {\n          return get().tasks.filter((task) => task.status === status);\n        },\n\n        getFilteredTasks: () => {\n          const { tasks, filter } = get();\n          if (filter === 'all') return tasks;\n          return tasks.filter((task) => task.status === filter);\n        },\n      }),\n      {\n        name: 'tasks-storage',\n        partialize: (state) => ({ tasks: state.tasks, filter: state.filter }),\n      }\n    ),\n    { name: 'TasksStore' }\n  )\n);\n"],"names":["useTasksStore","create","devtools","persist","set","get","tasks","task","state","id","updatedTask","filter","isLoading","error","status"],"mappings":"gDA2BO,MAAMA,EAAgBC,EAAA,EAC3BC,EACEC,EACE,CAACC,EAAKC,KAAS,CACb,MAAO,CAAA,EACP,aAAc,KACd,UAAW,GACX,MAAO,KACP,OAAQ,MAER,SAAWC,GAAUF,EAAI,CAAE,MAAAE,EAAO,EAElC,QAAUC,GAASH,EAAKI,IAAW,CAAE,MAAO,CAAC,GAAGA,EAAM,MAAOD,CAAI,GAAI,EAErE,WAAY,CAACE,EAAIC,IACfN,EAAKI,IAAW,CACd,MAAOA,EAAM,MAAM,IAAKD,GACtBA,EAAK,KAAOE,EAAK,CAAE,GAAGF,EAAM,GAAGG,GAAgBH,CAAA,CACjD,EACA,EAEJ,WAAaE,GACXL,EAAKI,IAAW,CACd,MAAOA,EAAM,MAAM,OAAQD,GAASA,EAAK,KAAOE,CAAE,CAAA,EAClD,EAEJ,WAAaF,GAASH,EAAI,CAAE,aAAcG,EAAM,EAEhD,UAAYI,GAAWP,EAAI,CAAE,OAAAO,EAAQ,EAErC,WAAaC,GAAcR,EAAI,CAAE,UAAAQ,EAAW,EAE5C,SAAWC,GAAUT,EAAI,CAAE,MAAAS,EAAO,EAElC,WAAY,IAAMT,EAAI,CAAE,MAAO,CAAA,EAAI,aAAc,KAAM,EAEvD,iBAAmBU,GACVT,EAAA,EAAM,MAAM,OAAQE,GAASA,EAAK,SAAWO,CAAM,EAG5D,iBAAkB,IAAM,CACtB,KAAM,CAAE,MAAAR,EAAO,OAAAK,CAAA,EAAWN,EAAA,EAC1B,OAAIM,IAAW,MAAcL,EACtBA,EAAM,OAAQC,GAASA,EAAK,SAAWI,CAAM,CACtD,CAAA,GAEF,CACE,KAAM,gBACN,WAAaH,IAAW,CAAE,MAAOA,EAAM,MAAO,OAAQA,EAAM,MAAA,EAAO,CACrE,EAEF,CAAE,KAAM,YAAA,CAAa,CAEzB"}